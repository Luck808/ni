/**
 * Automation API provider
 * Automation provides template of this description, and anyone may modify it in your own project.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { NoncomplianceDTO } from '../model/noncomplianceDTO';
import { PageInfoOfNoncomplianceDTO } from '../model/pageInfoOfNoncomplianceDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NoncomplianceControllerService {

    protected basePath = 'https://localhost:10061';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * batchDeleteNCObjects
     * batchDeleteNCObjects
     * @param ncIds ncIds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchDeleteNCObjectsUsingGET(ncIds: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public batchDeleteNCObjectsUsingGET(ncIds: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public batchDeleteNCObjectsUsingGET(ncIds: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public batchDeleteNCObjectsUsingGET(ncIds: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ncIds === null || ncIds === undefined) {
            throw new Error('Required parameter ncIds was null or undefined when calling batchDeleteNCObjectsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/noncompliance/delete_list/${encodeURIComponent(String(ncIds))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteNCObject
     * deleteNCObject
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteNCObjectUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteNCObjectUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteNCObjectUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteNCObjectUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteNCObjectUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/noncompliance/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByNonComplianceId
     * findByNonComplianceId
     * @param nonComplianceId nonComplianceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByNonComplianceIdUsingGET(nonComplianceId: string, observe?: 'body', reportProgress?: boolean): Observable<NoncomplianceDTO>;
    public findByNonComplianceIdUsingGET(nonComplianceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NoncomplianceDTO>>;
    public findByNonComplianceIdUsingGET(nonComplianceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NoncomplianceDTO>>;
    public findByNonComplianceIdUsingGET(nonComplianceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nonComplianceId === null || nonComplianceId === undefined) {
            throw new Error('Required parameter nonComplianceId was null or undefined when calling findByNonComplianceIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nonComplianceId !== undefined && nonComplianceId !== null) {
            queryParameters = queryParameters.set('nonComplianceId', <any>nonComplianceId);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NoncomplianceDTO>(`${this.basePath}/noncompliance/query-single`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryPageInfoById
     * queryPageInfoById
     * @param pageNumber pageNumber
     * @param pageSize pageSize
     * @param searchId searchId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryPageInfoByIdUsingGET(pageNumber: number, pageSize: number, searchId: string, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfNoncomplianceDTO>;
    public queryPageInfoByIdUsingGET(pageNumber: number, pageSize: number, searchId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfNoncomplianceDTO>>;
    public queryPageInfoByIdUsingGET(pageNumber: number, pageSize: number, searchId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfNoncomplianceDTO>>;
    public queryPageInfoByIdUsingGET(pageNumber: number, pageSize: number, searchId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling queryPageInfoByIdUsingGET.');
        }

        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling queryPageInfoByIdUsingGET.');
        }

        if (searchId === null || searchId === undefined) {
            throw new Error('Required parameter searchId was null or undefined when calling queryPageInfoByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchId !== undefined && searchId !== null) {
            queryParameters = queryParameters.set('searchId', <any>searchId);
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageInfoOfNoncomplianceDTO>(`${this.basePath}/noncompliance/query-page`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveNoncompliance
     * saveNoncompliance
     * @param dto dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public saveNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public saveNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public saveNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling saveNoncomplianceUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/noncompliance/save-nc`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateNoncompliance
     * updateNoncompliance
     * @param dto dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public updateNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public updateNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public updateNoncomplianceUsingPOST(dto: NoncomplianceDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling updateNoncomplianceUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // authentication (USER_ID) required
        if (this.configuration.apiKeys["USER_ID"]) {
            headers = headers.set('USER_ID', this.configuration.apiKeys["USER_ID"]);
        }

        // authentication (tenantId) required
        if (this.configuration.apiKeys["tenantId"]) {
            headers = headers.set('tenantId', this.configuration.apiKeys["tenantId"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/noncompliance/update-nc`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
