/**
 * Automation API provider
 * Automation provides template of this description, and anyone may modify it in your own project.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BusinessCaseDTO } from '../model/businessCaseDTO';
import { BusinessPartIputDTO } from '../model/businessPartIputDTO';
import { RpaInputDto } from '../model/rpaInputDto';
import { TaskDTO } from '../model/taskDTO';
import { XChangeDTO } from '../model/xChangeDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class XchangeControllerService {

    protected basePath = 'https://localhost:10048';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * batchPauseOrResume
     * 
     * @param caseDTOs caseDTOs
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchPauseOrResumeUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public batchPauseOrResumeUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public batchPauseOrResumeUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public batchPauseOrResumeUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTOs === null || caseDTOs === undefined) {
            throw new Error('Required parameter caseDTOs was null or undefined when calling batchPauseOrResumeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/batch/pause_or_resume`,
            caseDTOs,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * batchReassign
     * 
     * @param caseDTOs caseDTOs
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchReassignUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public batchReassignUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public batchReassignUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public batchReassignUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTOs === null || caseDTOs === undefined) {
            throw new Error('Required parameter caseDTOs was null or undefined when calling batchReassignUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/batch/reassign`,
            caseDTOs,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * batchTerminate
     * 
     * @param caseDTOs caseDTOs
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchTerminateUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public batchTerminateUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public batchTerminateUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public batchTerminateUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTOs === null || caseDTOs === undefined) {
            throw new Error('Required parameter caseDTOs was null or undefined when calling batchTerminateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/batch/terminate`,
            caseDTOs,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * batchTransfer
     * 
     * @param caseDTOs caseDTOs
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public batchTransferUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public batchTransferUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public batchTransferUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public batchTransferUsingPOST(caseDTOs: Array<BusinessCaseDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTOs === null || caseDTOs === undefined) {
            throw new Error('Required parameter caseDTOs was null or undefined when calling batchTransferUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/batch/transfer`,
            caseDTOs,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commit
     * 
     * @param xChangeDTO xChangeDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commitUsingPOST(xChangeDTO: XChangeDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public commitUsingPOST(xChangeDTO: XChangeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public commitUsingPOST(xChangeDTO: XChangeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public commitUsingPOST(xChangeDTO: XChangeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xChangeDTO === null || xChangeDTO === undefined) {
            throw new Error('Required parameter xChangeDTO was null or undefined when calling commitUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/commit`,
            xChangeDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createCase
     * 
     * @param iputDTO iputDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createCaseUsingPOST(iputDTO: BusinessPartIputDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createCaseUsingPOST(iputDTO: BusinessPartIputDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createCaseUsingPOST(iputDTO: BusinessPartIputDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createCaseUsingPOST(iputDTO: BusinessPartIputDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (iputDTO === null || iputDTO === undefined) {
            throw new Error('Required parameter iputDTO was null or undefined when calling createCaseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/xchange/create_case`,
            iputDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBussinessData
     * 
     * @param taskDTO taskDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBussinessDataUsingPOST(taskDTO: TaskDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getBussinessDataUsingPOST(taskDTO: TaskDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getBussinessDataUsingPOST(taskDTO: TaskDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getBussinessDataUsingPOST(taskDTO: TaskDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskDTO === null || taskDTO === undefined) {
            throw new Error('Required parameter taskDTO was null or undefined when calling getBussinessDataUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/xchange/get_bussiness_case_data`,
            taskDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pauseOrResume
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseOrResumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public pauseOrResumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public pauseOrResumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public pauseOrResumeUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling pauseOrResumeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/pause_or_resume`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pause
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public pauseUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public pauseUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public pauseUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling pauseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/pause`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reassign
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reassignUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public reassignUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public reassignUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public reassignUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling reassignUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/reassign`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * resume
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public resumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public resumeUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public resumeUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling resumeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/resume`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rpaCommit
     * 
     * @param taskDTO taskDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rpaCommitUsingPOST(taskDTO: RpaInputDto, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public rpaCommitUsingPOST(taskDTO: RpaInputDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public rpaCommitUsingPOST(taskDTO: RpaInputDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public rpaCommitUsingPOST(taskDTO: RpaInputDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskDTO === null || taskDTO === undefined) {
            throw new Error('Required parameter taskDTO was null or undefined when calling rpaCommitUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/rpa_commit`,
            taskDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save
     * 
     * @param xChangeDTO xChangeDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveUsingPOST(xChangeDTO: XChangeDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public saveUsingPOST(xChangeDTO: XChangeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public saveUsingPOST(xChangeDTO: XChangeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public saveUsingPOST(xChangeDTO: XChangeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (xChangeDTO === null || xChangeDTO === undefined) {
            throw new Error('Required parameter xChangeDTO was null or undefined when calling saveUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/save`,
            xChangeDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * terminate
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public terminateUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public terminateUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public terminateUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public terminateUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling terminateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/terminate`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transfer
     * 
     * @param caseDTO caseDTO
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public transferUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public transferUsingPOST(caseDTO: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public transferUsingPOST(caseDTO: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caseDTO === null || caseDTO === undefined) {
            throw new Error('Required parameter caseDTO was null or undefined when calling transferUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/transfer`,
            caseDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
