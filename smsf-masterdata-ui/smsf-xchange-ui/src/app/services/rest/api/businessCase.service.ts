/**
 * Automation API provider
 * Automation provides template of this description, and anyone may modify it in your own project.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AcceptBusinessCaseApiDTO } from '../model/acceptBusinessCaseApiDTO';
import { BusinessCaseDTO } from '../model/businessCaseDTO';
import { EmployeeDto } from '../model/employeeDto';
import { LoginUserInfoDTO } from '../model/loginUserInfoDTO';
import { MasterDataProcessDTO } from '../model/masterDataProcessDTO';
import { OrganizationOut } from '../model/organizationOut';
import { PageInfoOfBusinessCaseDTO } from '../model/pageInfoOfBusinessCaseDTO';
import { PageInfoOfEmployeeDto } from '../model/pageInfoOfEmployeeDto';
import { XchangeBusinessStatusDTO } from '../model/xchangeBusinessStatusDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BusinessCaseService {

    protected basePath = 'https://localhost:10048';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * acceptBusinessCaseApi
     * 
     * @param dto dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptBusinessCaseApiUsingPOST(dto: AcceptBusinessCaseApiDTO, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public acceptBusinessCaseApiUsingPOST(dto: AcceptBusinessCaseApiDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public acceptBusinessCaseApiUsingPOST(dto: AcceptBusinessCaseApiDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public acceptBusinessCaseApiUsingPOST(dto: AcceptBusinessCaseApiDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (dto === null || dto === undefined) {
            throw new Error('Required parameter dto was null or undefined when calling acceptBusinessCaseApiUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/xchange/business-case/accept-business-case-api`,
            dto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportBusinessCase
     * 
     * @param searchDto searchDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (searchDto === null || searchDto === undefined) {
            throw new Error('Required parameter searchDto was null or undefined when calling exportBusinessCaseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/xchange/business-case/export-business-case`,
            searchDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLoginUser
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLoginUserUsingGET(observe?: 'body', reportProgress?: boolean): Observable<LoginUserInfoDTO>;
    public getLoginUserUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginUserInfoDTO>>;
    public getLoginUserUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginUserInfoDTO>>;
    public getLoginUserUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<LoginUserInfoDTO>(`${this.basePath}/xchange/business-case/get-loginuser`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProcessList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcessListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<MasterDataProcessDTO>>;
    public getProcessListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MasterDataProcessDTO>>>;
    public getProcessListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MasterDataProcessDTO>>>;
    public getProcessListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MasterDataProcessDTO>>(`${this.basePath}/xchange/business-case/get-process-list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStatusList
     * 
     * @param processId processId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatusListUsingGET(processId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<XchangeBusinessStatusDTO>>;
    public getStatusListUsingGET(processId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<XchangeBusinessStatusDTO>>>;
    public getStatusListUsingGET(processId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<XchangeBusinessStatusDTO>>>;
    public getStatusListUsingGET(processId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getStatusListUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<XchangeBusinessStatusDTO>>(`${this.basePath}/xchange/business-case/get-status-list/${encodeURIComponent(String(processId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * lockBusinessCase
     * 
     * @param id id
     * @param version version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lockBusinessCaseUsingGET(id: string, version: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public lockBusinessCaseUsingGET(id: string, version: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public lockBusinessCaseUsingGET(id: string, version: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public lockBusinessCaseUsingGET(id: string, version: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling lockBusinessCaseUsingGET.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling lockBusinessCaseUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/xchange/business-case/lock-business-case/${encodeURIComponent(String(id))}/${encodeURIComponent(String(version))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * nextBusinessCase
     * 
     * @param searchDto searchDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nextBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'body', reportProgress?: boolean): Observable<BusinessCaseDTO>;
    public nextBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BusinessCaseDTO>>;
    public nextBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BusinessCaseDTO>>;
    public nextBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (searchDto === null || searchDto === undefined) {
            throw new Error('Required parameter searchDto was null or undefined when calling nextBusinessCaseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BusinessCaseDTO>(`${this.basePath}/xchange/business-case/next-business-case`,
            searchDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryBusinessCase
     * 
     * @param searchDto searchDto
     * @param pageNumber pageNumber
     * @param pageSize pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfBusinessCaseDTO>;
    public queryBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfBusinessCaseDTO>>;
    public queryBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfBusinessCaseDTO>>;
    public queryBusinessCaseUsingPOST(searchDto: BusinessCaseDTO, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (searchDto === null || searchDto === undefined) {
            throw new Error('Required parameter searchDto was null or undefined when calling queryBusinessCaseUsingPOST.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageInfoOfBusinessCaseDTO>(`${this.basePath}/xchange/business-case/query-business-case`,
            searchDto,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * selectPersons
     * 
     * @param searchDtos searchDtos
     * @param eid eid
     * @param name name
     * @param pageNumber pageNumber
     * @param pageSize pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selectPersonsUsingPOST(searchDtos: Array<BusinessCaseDTO>, eid?: string, name?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfEmployeeDto>;
    public selectPersonsUsingPOST(searchDtos: Array<BusinessCaseDTO>, eid?: string, name?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfEmployeeDto>>;
    public selectPersonsUsingPOST(searchDtos: Array<BusinessCaseDTO>, eid?: string, name?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfEmployeeDto>>;
    public selectPersonsUsingPOST(searchDtos: Array<BusinessCaseDTO>, eid?: string, name?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (searchDtos === null || searchDtos === undefined) {
            throw new Error('Required parameter searchDtos was null or undefined when calling selectPersonsUsingPOST.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eid !== undefined && eid !== null) {
            queryParameters = queryParameters.set('eid', <any>eid);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageInfoOfEmployeeDto>(`${this.basePath}/xchange/business-case/select-persons`,
            searchDtos,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEmployeeCache
     * 
     * @param employee employee
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployeeCacheUsingPOST(employee: EmployeeDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEmployeeCacheUsingPOST(employee: EmployeeDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEmployeeCacheUsingPOST(employee: EmployeeDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEmployeeCacheUsingPOST(employee: EmployeeDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employee === null || employee === undefined) {
            throw new Error('Required parameter employee was null or undefined when calling updateEmployeeCacheUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/xchange/business-case/update-employee`,
            employee,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrganizationoutCache
     * 
     * @param organizationout organizationout
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganizationoutCacheUsingPOST(organizationout: OrganizationOut, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateOrganizationoutCacheUsingPOST(organizationout: OrganizationOut, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateOrganizationoutCacheUsingPOST(organizationout: OrganizationOut, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateOrganizationoutCacheUsingPOST(organizationout: OrganizationOut, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organizationout === null || organizationout === undefined) {
            throw new Error('Required parameter organizationout was null or undefined when calling updateOrganizationoutCacheUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/xchange/business-case/update-organizationout`,
            organizationout,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
