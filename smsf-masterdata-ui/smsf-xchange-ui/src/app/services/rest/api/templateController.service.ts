/**
 * Automation API provider
 * Automation provides template of this description, and anyone may modify it in your own project.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ElementDirectiveDTO } from '../model/elementDirectiveDTO';
import { ModuleTemplateInDTO } from '../model/moduleTemplateInDTO';
import { ModuleTemplateOutDTO } from '../model/moduleTemplateOutDTO';
import { PageInfoOfTemplateDTO } from '../model/pageInfoOfTemplateDTO';
import { PageInfoOfTemplateElementDTO } from '../model/pageInfoOfTemplateElementDTO';
import { TemplateDTO } from '../model/templateDTO';
import { TemplateElementWithDirectiveDTO } from '../model/templateElementWithDirectiveDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TemplateControllerService {

    protected basePath = 'https://localhost:10048';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deleteTemplate
     * 
     * @param templateIds templateIds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTemplateUsingDELETE(templateIds: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTemplateUsingDELETE(templateIds: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTemplateUsingDELETE(templateIds: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTemplateUsingDELETE(templateIds: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (templateIds === null || templateIds === undefined) {
            throw new Error('Required parameter templateIds was null or undefined when calling deleteTemplateUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/templates/${encodeURIComponent(String(templateIds))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findElementDirective
     * 
     * @param elementId elementId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findElementDirectiveUsingGET(elementId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ElementDirectiveDTO>>;
    public findElementDirectiveUsingGET(elementId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ElementDirectiveDTO>>>;
    public findElementDirectiveUsingGET(elementId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ElementDirectiveDTO>>>;
    public findElementDirectiveUsingGET(elementId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (elementId === null || elementId === undefined) {
            throw new Error('Required parameter elementId was null or undefined when calling findElementDirectiveUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ElementDirectiveDTO>>(`${this.basePath}/templates/elements/${encodeURIComponent(String(elementId))}/directives`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findTemplateById
     * 
     * @param templateId templateId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findTemplateByIdUsingGET(templateId: string, observe?: 'body', reportProgress?: boolean): Observable<ModuleTemplateOutDTO>;
    public findTemplateByIdUsingGET(templateId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModuleTemplateOutDTO>>;
    public findTemplateByIdUsingGET(templateId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModuleTemplateOutDTO>>;
    public findTemplateByIdUsingGET(templateId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling findTemplateByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ModuleTemplateOutDTO>(`${this.basePath}/templates/${encodeURIComponent(String(templateId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryElementPage
     * 
     * @param pageNumber pageNumber
     * @param pageSize pageSize
     * @param templateId templateId
     * @param componentName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryElementPageUsingGET(pageNumber: number, pageSize: number, templateId: string, componentName?: string, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfTemplateElementDTO>;
    public queryElementPageUsingGET(pageNumber: number, pageSize: number, templateId: string, componentName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfTemplateElementDTO>>;
    public queryElementPageUsingGET(pageNumber: number, pageSize: number, templateId: string, componentName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfTemplateElementDTO>>;
    public queryElementPageUsingGET(pageNumber: number, pageSize: number, templateId: string, componentName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling queryElementPageUsingGET.');
        }

        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling queryElementPageUsingGET.');
        }

        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling queryElementPageUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (componentName !== undefined && componentName !== null) {
            queryParameters = queryParameters.set('componentName', <any>componentName);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageInfoOfTemplateElementDTO>(`${this.basePath}/templates/${encodeURIComponent(String(templateId))}/elements/page`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryElementWithDirective
     * 
     * @param templateId templateId
     * @param componentName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryElementWithDirectiveUsingGET(templateId: string, componentName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TemplateElementWithDirectiveDTO>>;
    public queryElementWithDirectiveUsingGET(templateId: string, componentName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TemplateElementWithDirectiveDTO>>>;
    public queryElementWithDirectiveUsingGET(templateId: string, componentName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TemplateElementWithDirectiveDTO>>>;
    public queryElementWithDirectiveUsingGET(templateId: string, componentName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling queryElementWithDirectiveUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (componentName !== undefined && componentName !== null) {
            queryParameters = queryParameters.set('componentName', <any>componentName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TemplateElementWithDirectiveDTO>>(`${this.basePath}/templates/${encodeURIComponent(String(templateId))}/elements`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryTemplatePage
     * 
     * @param pageNumber pageNumber
     * @param pageSize pageSize
     * @param componentName 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryTemplatePageUsingGET(pageNumber: number, pageSize: number, componentName?: string, name?: string, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfTemplateDTO>;
    public queryTemplatePageUsingGET(pageNumber: number, pageSize: number, componentName?: string, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfTemplateDTO>>;
    public queryTemplatePageUsingGET(pageNumber: number, pageSize: number, componentName?: string, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfTemplateDTO>>;
    public queryTemplatePageUsingGET(pageNumber: number, pageSize: number, componentName?: string, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling queryTemplatePageUsingGET.');
        }

        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling queryTemplatePageUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (componentName !== undefined && componentName !== null) {
            queryParameters = queryParameters.set('componentName', <any>componentName);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageInfoOfTemplateDTO>(`${this.basePath}/templates/pages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * queryTemplate
     * 
     * @param componentName 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryTemplateUsingGET(componentName?: string, name?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TemplateDTO>>;
    public queryTemplateUsingGET(componentName?: string, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TemplateDTO>>>;
    public queryTemplateUsingGET(componentName?: string, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TemplateDTO>>>;
    public queryTemplateUsingGET(componentName?: string, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (componentName !== undefined && componentName !== null) {
            queryParameters = queryParameters.set('componentName', <any>componentName);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TemplateDTO>>(`${this.basePath}/templates`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveTemplate
     * 
     * @param template template
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveTemplateUsingPOST(template: ModuleTemplateInDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public saveTemplateUsingPOST(template: ModuleTemplateInDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public saveTemplateUsingPOST(template: ModuleTemplateInDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public saveTemplateUsingPOST(template: ModuleTemplateInDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (template === null || template === undefined) {
            throw new Error('Required parameter template was null or undefined when calling saveTemplateUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/templates`,
            template,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateTemplate
     * 
     * @param template template
     * @param templateId templateId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTemplateUsingPATCH(template: ModuleTemplateInDTO, templateId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTemplateUsingPATCH(template: ModuleTemplateInDTO, templateId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTemplateUsingPATCH(template: ModuleTemplateInDTO, templateId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTemplateUsingPATCH(template: ModuleTemplateInDTO, templateId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (template === null || template === undefined) {
            throw new Error('Required parameter template was null or undefined when calling updateTemplateUsingPATCH.');
        }

        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling updateTemplateUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<any>(`${this.basePath}/templates/${encodeURIComponent(String(templateId))}`,
            template,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
