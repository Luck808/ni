/**
 * Automation API provider
 * Automation provides template of this description, and anyone may modify it in your own project.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PageInfoOfStep } from '../model/pageInfoOfStep';
import { PageInfoOfStepDto } from '../model/pageInfoOfStepDto';
import { Step } from '../model/step';
import { StepDto } from '../model/stepDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StepControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * stepBatchDelete
     * 
     * @param ids ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepBatchDeleteUsingDELETE(ids: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public stepBatchDeleteUsingDELETE(ids: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public stepBatchDeleteUsingDELETE(ids: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public stepBatchDeleteUsingDELETE(ids: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling stepBatchDeleteUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ids !== undefined && ids !== null) {
            queryParameters = queryParameters.set('ids', <any>ids);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<number>(`${this.basePath}/masterdata/step/batch-delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepBatchSave
     * 
     * @param steps steps
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepBatchSaveUsingPOST(steps: Array<Step>, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public stepBatchSaveUsingPOST(steps: Array<Step>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public stepBatchSaveUsingPOST(steps: Array<Step>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public stepBatchSaveUsingPOST(steps: Array<Step>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (steps === null || steps === undefined) {
            throw new Error('Required parameter steps was null or undefined when calling stepBatchSaveUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/masterdata/step/batch-save`,
            steps,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepDelete
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepDeleteUsingDELETE(id: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public stepDeleteUsingDELETE(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public stepDeleteUsingDELETE(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public stepDeleteUsingDELETE(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling stepDeleteUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<number>(`${this.basePath}/masterdata/step/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepFindByColumnsPaged
     * 
     * @param columns columns
     * @param step step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepFindByColumnsPagedUsingPOST(columns: string, step: Step, observe?: 'body', reportProgress?: boolean): Observable<Array<StepDto>>;
    public stepFindByColumnsPagedUsingPOST(columns: string, step: Step, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StepDto>>>;
    public stepFindByColumnsPagedUsingPOST(columns: string, step: Step, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StepDto>>>;
    public stepFindByColumnsPagedUsingPOST(columns: string, step: Step, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling stepFindByColumnsPagedUsingPOST.');
        }

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling stepFindByColumnsPagedUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<StepDto>>(`${this.basePath}/masterdata/step/find-by/${encodeURIComponent(String(columns))}`,
            step,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepFindByPaged
     * 
     * @param pageNo page-no
     * @param pageSize page-size
     * @param step step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepFindByPagedUsingPOST(pageNo: number, pageSize: number, step: Step, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfStepDto>;
    public stepFindByPagedUsingPOST(pageNo: number, pageSize: number, step: Step, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfStepDto>>;
    public stepFindByPagedUsingPOST(pageNo: number, pageSize: number, step: Step, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfStepDto>>;
    public stepFindByPagedUsingPOST(pageNo: number, pageSize: number, step: Step, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pageNo === null || pageNo === undefined) {
            throw new Error('Required parameter pageNo was null or undefined when calling stepFindByPagedUsingPOST.');
        }

        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling stepFindByPagedUsingPOST.');
        }

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling stepFindByPagedUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageInfoOfStepDto>(`${this.basePath}/masterdata/step/find-by-paged/${encodeURIComponent(String(pageNo))}/${encodeURIComponent(String(pageSize))}`,
            step,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepFindBy
     * 
     * @param stepDto stepDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepFindByUsingPOST(stepDto: StepDto, observe?: 'body', reportProgress?: boolean): Observable<Array<StepDto>>;
    public stepFindByUsingPOST(stepDto: StepDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StepDto>>>;
    public stepFindByUsingPOST(stepDto: StepDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StepDto>>>;
    public stepFindByUsingPOST(stepDto: StepDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stepDto === null || stepDto === undefined) {
            throw new Error('Required parameter stepDto was null or undefined when calling stepFindByUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<StepDto>>(`${this.basePath}/masterdata/step/find-by`,
            stepDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepFindOne
     * 
     * @param fieldName fieldName
     * @param value value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepFindOneUsingGET(fieldName: string, value: string, observe?: 'body', reportProgress?: boolean): Observable<StepDto>;
    public stepFindOneUsingGET(fieldName: string, value: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StepDto>>;
    public stepFindOneUsingGET(fieldName: string, value: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StepDto>>;
    public stepFindOneUsingGET(fieldName: string, value: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fieldName === null || fieldName === undefined) {
            throw new Error('Required parameter fieldName was null or undefined when calling stepFindOneUsingGET.');
        }

        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling stepFindOneUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fieldName !== undefined && fieldName !== null) {
            queryParameters = queryParameters.set('fieldName', <any>fieldName);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StepDto>(`${this.basePath}/masterdata/step/find-one`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepFind
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepFindUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<StepDto>;
    public stepFindUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StepDto>>;
    public stepFindUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StepDto>>;
    public stepFindUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling stepFindUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StepDto>(`${this.basePath}/masterdata/step/find`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepListPaged
     * 
     * @param pageNo page-no
     * @param pageSize page-size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepListPagedUsingGET(pageNo: number, pageSize: number, observe?: 'body', reportProgress?: boolean): Observable<PageInfoOfStep>;
    public stepListPagedUsingGET(pageNo: number, pageSize: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageInfoOfStep>>;
    public stepListPagedUsingGET(pageNo: number, pageSize: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageInfoOfStep>>;
    public stepListPagedUsingGET(pageNo: number, pageSize: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pageNo === null || pageNo === undefined) {
            throw new Error('Required parameter pageNo was null or undefined when calling stepListPagedUsingGET.');
        }

        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling stepListPagedUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageInfoOfStep>(`${this.basePath}/masterdata/step/list-paged/${encodeURIComponent(String(pageNo))}/${encodeURIComponent(String(pageSize))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<StepDto>>;
    public stepListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StepDto>>>;
    public stepListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StepDto>>>;
    public stepListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StepDto>>(`${this.basePath}/masterdata/step/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepSave
     * 
     * @param step step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepSaveUsingPOST(step: Step, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public stepSaveUsingPOST(step: Step, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public stepSaveUsingPOST(step: Step, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public stepSaveUsingPOST(step: Step, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling stepSaveUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/masterdata/step/save`,
            step,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * stepUpdate
     * 
     * @param step step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stepUpdateUsingPUT(step: Step, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public stepUpdateUsingPUT(step: Step, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public stepUpdateUsingPUT(step: Step, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public stepUpdateUsingPUT(step: Step, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling stepUpdateUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<number>(`${this.basePath}/masterdata/step/update`,
            step,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
